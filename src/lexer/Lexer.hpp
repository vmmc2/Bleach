#pragma once

#include <map>
#include <string>
#include <string_view>
#include <utility>
#include <vector>

#include "../utils/Token.hpp"


/**
 * @class Lexer
 * @brief Represents a lexer
 *
 * The Lexer class
 */
class Lexer{
  private:
    std::string_view sourceCode; /**< Variable that represents the source code written inside a Bleach file, which the Lexer will lex. */
    std::vector<Token> tokens; /**< Variable that represents the list of tokens that will be generated after the lexical analysis is done by the Lexer. */
    int start = 0; /**< Variable. */
    int current = 0; /**< Variable. */
    int line = 1; /**< Variable. */

  public:
    /**
     * @brief Constructs a Lexer with the source code (as a string) present inside a Bleach (.bah) file. 
     *
     * This constructor initializes a Lexer object with the given source code of a Bleach file,
     * represented as a string.
     *
     * @param sourceCode The source code of the Bleach file intended to be interpreted. Such source code is provided as a string.
     *
     * @note The sourceCode parameter is moved into the Lexer object to avoid unnecessary copies.
     */
    Lexer(std::string_view sourceCode)
      : sourceCode{std::move(sourceCode)}
    {}

    /**
     * @brief Performs the lexical analysis on the string present inside the 'sourceCode' variable
     * and returns a list of all tokens generated by the execution of such analysis.
     * 
     * This method is responsible for performing the lexical analysis
     * 
     *
     * @return The list of token generated by the lexical analysis.
    **/
    std::vector<Token> lexTokens(){
      return tokens;
    }

};